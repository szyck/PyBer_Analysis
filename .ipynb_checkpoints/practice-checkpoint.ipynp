{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0edcefee",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "594fb07e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import dependencies\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "104944cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set the x-axis to a list of strings for each month.\n",
    "x_axis = [\"Jan\", \"Feb\", \"Mar\", \"April\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"]\n",
    "\n",
    "# Set the y-axis to a list of floats as the total fare in US dollars accumulated for each month.\n",
    "y_axis = [10.02, 23.24, 39.20, 35.42, 32.34, 27.04, 43.82, 10.56, 11.85, 27.90, 20.71, 20.09]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "af47e549",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.patches.Wedge at 0x185d5df4988>,\n",
       "  <matplotlib.patches.Wedge at 0x185d5e02a08>,\n",
       "  <matplotlib.patches.Wedge at 0x185d64b24c8>,\n",
       "  <matplotlib.patches.Wedge at 0x185d64b2fc8>,\n",
       "  <matplotlib.patches.Wedge at 0x185d64b9e08>,\n",
       "  <matplotlib.patches.Wedge at 0x185d64c0948>,\n",
       "  <matplotlib.patches.Wedge at 0x185d64c6148>,\n",
       "  <matplotlib.patches.Wedge at 0x185d64c6c08>,\n",
       "  <matplotlib.patches.Wedge at 0x185d64b9ac8>,\n",
       "  <matplotlib.patches.Wedge at 0x185d64c0648>,\n",
       "  <matplotlib.patches.Wedge at 0x185d5df4148>,\n",
       "  <matplotlib.patches.Wedge at 0x185d64db6c8>],\n",
       " [Text(1.0940372721655667, 0.11437852557419124, 'Jan'),\n",
       "  Text(0.9905193092273052, 0.4784051609753622, 'Feb'),\n",
       "  Text(0.4998632656180861, 0.9798656620606842, 'Mar'),\n",
       "  Text(-0.3293082697128627, 1.0495504101750999, 'April'),\n",
       "  Text(-0.9306200792045569, 0.5864693241605263, 'May'),\n",
       "  Text(-1.0983369533258995, -0.06046434452452758, 'June'),\n",
       "  Text(-0.7729302540020312, -0.782674148319948, 'July'),\n",
       "  Text(-0.2333875250754619, -1.0749559354406817, 'Aug'),\n",
       "  Text(0.021097559209412746, -1.099797660024518, 'Sept'),\n",
       "  Text(0.4609812999807629, -0.9987473359504124, 'Oct'),\n",
       "  Text(0.8868706338501641, -0.6507384104340302, 'Nov'),\n",
       "  Text(1.0760953148482877, -0.22807646384834376, 'Dec')])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.pie(y_axis, labels=x_axis)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d1ba460a",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (1885869165.py, line 10)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"C:\\Users\\Sam\\AppData\\Local\\Temp\\ipykernel_13368\\1885869165.py\"\u001b[1;36m, line \u001b[1;32m10\u001b[0m\n\u001b[1;33m    plt.errorbar(x, y, yerr=<value>)\u001b[0m\n\u001b[1;37m                            ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "# Assign 12 colors, one for each month.\n",
    "colors = [\"slateblue\", \"magenta\", \"lightblue\", \"green\", \"yellowgreen\", \"greenyellow\", \"yellow\", \"orange\", \"gold\", \"indianred\", \"tomato\", \"mistyrose\"]\n",
    "explode_values = (0, 0, 0, 0, 0, 0, 0.2, 0, 0, 0, 0, 0)\n",
    "plt.subplots(figsize=(8, 8))\n",
    "plt.pie(y_axis,\n",
    "    explode=explode_values,\n",
    "    colors=colors,\n",
    "    labels=x_axis,\n",
    "    autopct='%.1f%%')\n",
    "plt.errorbar(x, y, yerr=<value>)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41d326b1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "PythonData",
   "language": "python",
   "name": "pythondata"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
